{"version":3,"file":"github-api.js","sources":["../../app/js/github-api.js"],"names":["parseLinkHeader","header","unquote","value","charAt","length","substring","linkexp","paramexp","matches","match","rels","i","split","href","ps","link","s","j","p","paramsplit","name","undefined","rel","GithubApi","$http","$q","uriTemplate","sendGetQuery","url","decoratePromiseForPagination","get","headers","then","res","data","pagination","linkHeader","links","next","prev","createQueryFunction","queryType","namedParams","paramCnt","arguments","reject","Error","join","params","urls","fillFromObject","extractTree","ghTree","extractSubtree","children","subtreePath","ownTree","_","find","path","pull","subtrees","groupBy","child","indexOf","type","substr","directChildren","forEach","concat","map","subtree","pathFragment","subPath","c","assign","Accept","userSearch","listUserRepositories","repository","listBranches","branch","listTags","listCommits","tree","this","searchUser","getRepository","getBranch","getTree","getCompleteTree","owner","repo","sha","recursive","response","angular","module","service"],"mappings":"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","sourcesContent":["/**\n * This file contains the \"githubApi\" module which provides\n * the \"githubApi\" service.\n */\n(function() {\n  \"use strict\";\n  // taken from https://gist.github.com/deiu/9335803\n  // parse a Link header\n  //\n  // Link:<https://example.org/.meta>; rel=meta\n  //\n  // var r = parseLinkHeader(xhr.getResponseHeader('Link');\n  // r['meta']['href'] outputs https://example.org/.meta\n  function parseLinkHeader(header) {\n    // unquote string (utility)\n    function unquote(value) {\n      if (value.charAt(0) === '\"' && value.charAt(value.length - 1) === '\"') return value.substring(1, value.length - 1);\n      return value;\n    }\n    var linkexp = /<[^>]*>\\s*(\\s*;\\s*[^\\(\\)<>@,;:\"\\/\\[\\]\\?={} \\t]+=(([^\\(\\)<>@,;:\"\\/\\[\\]\\?={} \\t]+)|(\"[^\"]*\")))*(,|$)/g;\n    var paramexp = /[^\\(\\)<>@,;:\"\\/\\[\\]\\?={} \\t]+=(([^\\(\\)<>@,;:\"\\/\\[\\]\\?={} \\t]+)|(\"[^\"]*\"))/g;\n\n    var matches = header.match(linkexp);\n    var rels = {};\n    for (var i = 0; i < matches.length; i++) {\n      var split = matches[i].split('>');\n      var href = split[0].substring(1);\n      var ps = split[1];\n      var link = {};\n      link.href = href;\n      var s = ps.match(paramexp);\n      for (var j = 0; j < s.length; j++) {\n        var p = s[j];\n        var paramsplit = p.split('=');\n        var name = paramsplit[0];\n        link[name] = unquote(paramsplit[1]);\n      }\n      if (link.rel !== undefined) {\n        rels[link.rel] = link;\n      }\n    }\n    return rels;\n  }\n\n  angular.module(\"githubApi\", [\"uri-templates\"])\n  .service(\"githubApi\", [\"$http\", \"$q\", \"uriTemplate\", GithubApi]);\n\n  function GithubApi($http, $q, uriTemplate) {\n    //the http headers to sent with every request\n    var headers = {\n      \"Accept\": \"application/vnd.github.v3+json\",\n    };\n    //the url templates\n    var urls = {\n      userSearch: \"https://api.github.com/search/users?q={query}{&page,per_page,sort,order}\",\n      listUserRepositories: \"https://api.github.com/users/{user}/repos{?type,page,per_page,sort}\",\n      repository: \"https://api.github.com/repos/{owner}/{repo}\",\n      listBranches: \"https://api.github.com/repos/{owner}/{repo}/branches{?page,per_page}\",\n      branch: \"https://api.github.com/repos/{owner}/{repo}/branches/{branch}\",\n      listTags: \"https://api.github.com/repos/{owner}/{repo}/tags{?page,per_page}\",\n      listCommits: \"https://api.github.com/repos/{owner}/{repo}/commits{?sha,path,author,since,until,page,per_page}\",\n      tree: \"https://api.github.com/repos/{owner}/{repo}/git/trees/{sha}{?recursive}\"\n    };\n    //this function send a GET request with the necessary headers and returns the promise\n    //after applying decoratePromiseForPagination to it\n    function sendGetQuery(url) {\n      return decoratePromiseForPagination($http.get(url, {headers:headers}))\n        .then(function(res) {\n          return res.data;\n        });\n    }\n    //decorates the result with functions for using the pagination mechanism of Github\n    function decoratePromiseForPagination(p) {\n      return p.then(function(res) {\n        res.pagination = {};\n        var linkHeader = res.headers().link;\n        if(linkHeader) {\n          var links = parseLinkHeader(linkHeader);\n          if(links.next) {\n            res.pagination.next = function() {return sendGetQuery(links.next.href);};\n          }\n          if(links.prev) {\n            res.pagination.prev = function() {return sendGetQuery(links.prev.href);};\n          }\n        }\n        return res;\n      });\n    }\n    //creates a function which in turns queries the github API\n    //queryType is used as index into the urls object in order to retrieve the url template\n    //namedParams is an array containing the names of the parameters expected by the returned function\n    //(well, just read the code...)\n    function createQueryFunction(queryType, namedParams) {\n      var paramCnt = namedParams.length;\n      return function() {\n        if(arguments.length < paramCnt) {\n          return $q.reject(new Error(\n            \"tried to query \" + queryType + \" with insufficient arguments. Expected arguments: \" + namedParams.join(\",\")\n          ));\n        }\n        var params = arguments[paramCnt];\n        if(params === undefined) params = {};\n        for(var i = 0; i < namedParams.length; i++) {\n          params[namedParams[i]] = arguments[i];\n        }\n        return sendGetQuery(uriTemplate(urls[queryType]).fillFromObject(params));\n      };\n    }\n    //create the actual functions used to query the API\n    this.searchUser = createQueryFunction(\"userSearch\", [\"query\"]);\n    this.listUserRepositories = createQueryFunction(\"listUserRepositories\", [\"user\"]);\n    this.getRepository = createQueryFunction(\"repository\", [\"owner\", \"repo\"]);\n    this.listBranches = createQueryFunction(\"listBranches\", [\"owner\", \"repo\"]);\n    this.getBranch = createQueryFunction(\"branch\", [\"owner\", \"repo\", \"branch\"]);\n    this.listTags = createQueryFunction(\"listTags\", [\"owner\", \"repo\"]);\n    this.listCommits = createQueryFunction(\"listCommits\", [\"owner\", \"repo\"]);\n    this.getTree = createQueryFunction(\"tree\", [\"owner\", \"repo\", \"sha\"]);\n    //returns a complete tree as a nice tree structure\n    this.getCompleteTree = function(owner, repo, sha, params) {\n      if(arguments.length < 3) {\n        return $q.reject(new Error(\n          \"tried to call getCompleteTree with insufficient arguments.\"\n        ));\n      }\n      if(params === undefined) params = {};\n      params.recursive = 1;\n      return this.getTree(owner, repo, sha, params)\n        .then(function(response) {\n          return extractTree(response.tree);\n        });\n    }; //getCompleteTree\n    //extracts a nice tree structure from the github response\n    function extractTree(ghTree) {\n      //extracts a subtree from a set of children\n      function extractSubtree(children, subtreePath) {\n        //the own tree has an empty path\n        var ownTree = _.find(children, {path: \"\"});\n        if(ownTree) {\n          _.pull(children, ownTree);\n        } else {\n          ownTree = {};\n        }\n        //group by the directory of files\n        //the \"tree\" objects are grouped into the corresponding directory\n        //(this is the reason for this ternary expression)\n        var subtrees = _.groupBy(children, function(child) {\n          var i = child.path.indexOf(\"/\");\n          return i < 0 && child.type === \"tree\" ? child.path : child.path.substr(0, i);\n        });\n        //handle the direct children\n        var directChildren = subtrees[\"\"] !== undefined ? subtrees[\"\"] : [];\n        _.forEach(directChildren, function(child) {\n          child.name = child.path;\n          child.path = subtreePath.concat(child.name);\n        });\n        delete subtrees[\"\"];\n        //now, handle the subfolders\n        subtrees = _.map(subtrees, function(subtree, pathFragment) {\n          //build the subpath\n          var subPath = subtreePath.concat([pathFragment]);\n          //remove the pathFragment form the path of all children\n          _.forEach(subtree, function(c) {\n            c.path = c.path.substr(pathFragment.length+1);\n          });\n          //extract the subTree\n          return extractSubtree(subtree, subPath);\n        });\n        //finally, return this level of the tree\n        return _.assign(ownTree, {\n          path: subtreePath,\n          name: subtreePath[subtreePath.length-1],\n          children: subtrees.concat(directChildren)\n        });\n      }\n      return extractSubtree(ghTree, []);\n    }//extractTree\n  }\n})();\n"]}