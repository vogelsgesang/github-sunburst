{"version":3,"file":"uri-templates.js","sources":["../../app/js/uri-templates.js"],"names":["angular","module","factory","notReallyPercentEncode","string","encodeURI","replace","doubleEncoded","substring","uriTemplateSubstitution","spec","modifier","uriTemplateGlobalModifiers","charAt","separator","prefix","shouldEscape","showVariables","trimEmptyString","varNames","varList","split","varSpecs","varSpecMap","i","length","varName","truncate","indexOf","parts","parseInt","suffices","uriTemplateSuffices","varSpec","name","push","subFunction","valueFunction","result","startIndex","value","Array","isArray","Object","keys","j","encodeURIComponent","first","key","guessFunction","stringValue","resultObj","arrayValue","hasEquals","splice","innerArrayValue","decodeURIComponent","objectValue","innerValue","innerVarName","undefined","concat","specIndexMap","firstStarred","lastStarred","substitution","unSubstitution","UriTemplate","template","this","textParts","shift","prefixes","substitutions","unSubstitutions","part","remainder","funcs","fill","fromUri","substituted","nextPart","offset","endPart","nextPartPos","+","#",".","/",";","?","&","*","prototype","toString","fillFromObject","obj"],"mappings":"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","sourcesContent":["angular.module(\"uri-templates\", [])\n.factory(\"uriTemplate\", function () {\n  //from https://github.com/geraintluff/uri-templates\n\tvar uriTemplateGlobalModifiers = {\n\t\t\"+\": true,\n\t\t\"#\": true,\n\t\t\".\": true,\n\t\t\"/\": true,\n\t\t\";\": true,\n\t\t\"?\": true,\n\t\t\"&\": true\n\t};\n\tvar uriTemplateSuffices = {\n\t\t\"*\": true\n\t};\n\t\n\tfunction notReallyPercentEncode(string) {\n\t\treturn encodeURI(string).replace(/%25[0-9][0-9]/g, function (doubleEncoded) {\n\t\t\treturn \"%\" + doubleEncoded.substring(3);\n\t\t});\n\t}\n\n\tfunction uriTemplateSubstitution(spec) {\n\t\tvar modifier = \"\";\n\t\tif (uriTemplateGlobalModifiers[spec.charAt(0)]) {\n\t\t\tmodifier = spec.charAt(0);\n\t\t\tspec = spec.substring(1);\n\t\t}\n\t\tvar separator = \"\";\n\t\tvar prefix = \"\";\n\t\tvar shouldEscape = true;\n\t\tvar showVariables = false;\n\t\tvar trimEmptyString = false;\n\t\tif (modifier == '+') {\n\t\t\tshouldEscape = false;\n\t\t} else if (modifier == \".\") {\n\t\t\tprefix = \".\";\n\t\t\tseparator = \".\";\n\t\t} else if (modifier == \"/\") {\n\t\t\tprefix = \"/\";\n\t\t\tseparator = \"/\";\n\t\t} else if (modifier == '#') {\n\t\t\tprefix = \"#\";\n\t\t\tshouldEscape = false;\n\t\t} else if (modifier == ';') {\n\t\t\tprefix = \";\";\n\t\t\tseparator = \";\",\n\t\t\tshowVariables = true;\n\t\t\ttrimEmptyString = true;\n\t\t} else if (modifier == '?') {\n\t\t\tprefix = \"?\";\n\t\t\tseparator = \"&\",\n\t\t\tshowVariables = true;\n\t\t} else if (modifier == '&') {\n\t\t\tprefix = \"&\";\n\t\t\tseparator = \"&\",\n\t\t\tshowVariables = true;\n\t\t}\n\n\t\tvar varNames = [];\n\t\tvar varList = spec.split(\",\");\n\t\tvar varSpecs = [];\n\t\tvar varSpecMap = {};\n\t\tfor (var i = 0; i < varList.length; i++) {\n\t\t\tvar varName = varList[i];\n\t\t\tvar truncate = null;\n\t\t\tif (varName.indexOf(\":\") != -1) {\n\t\t\t\tvar parts = varName.split(\":\");\n\t\t\t\tvarName = parts[0];\n\t\t\t\ttruncate = parseInt(parts[1]);\n\t\t\t}\n\t\t\tvar suffices = {};\n\t\t\twhile (uriTemplateSuffices[varName.charAt(varName.length - 1)]) {\n\t\t\t\tsuffices[varName.charAt(varName.length - 1)] = true;\n\t\t\t\tvarName = varName.substring(0, varName.length - 1);\n\t\t\t}\n\t\t\tvar varSpec = {\n\t\t\t\ttruncate: truncate,\n\t\t\t\tname: varName,\n\t\t\t\tsuffices: suffices\n\t\t\t};\n\t\t\tvarSpecs.push(varSpec);\n\t\t\tvarSpecMap[varName] = varSpec;\n\t\t\tvarNames.push(varName);\n\t\t}\n\t\tvar subFunction = function (valueFunction) {\n\t\t\tvar result = \"\";\n\t\t\tvar startIndex = 0;\n\t\t\tfor (var i = 0; i < varSpecs.length; i++) {\n\t\t\t\tvar varSpec = varSpecs[i];\n\t\t\t\tvar value = valueFunction(varSpec.name);\n\t\t\t\tif (value == null || (Array.isArray(value) && value.length == 0) || (typeof value == 'object' && Object.keys(value).length == 0)) {\n\t\t\t\t\tstartIndex++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (i == startIndex) {\n\t\t\t\t\tresult += prefix;\n\t\t\t\t} else {\n\t\t\t\t\tresult += (separator || \",\");\n\t\t\t\t}\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tif (showVariables) {\n\t\t\t\t\t\tresult += varSpec.name + \"=\";\n\t\t\t\t\t}\n\t\t\t\t\tfor (var j = 0; j < value.length; j++) {\n\t\t\t\t\t\tif (j > 0) {\n\t\t\t\t\t\t\tresult += varSpec.suffices['*'] ? (separator || \",\") : \",\";\n\t\t\t\t\t\t\tif (varSpec.suffices['*'] && showVariables) {\n\t\t\t\t\t\t\t\tresult += varSpec.name + \"=\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(value[j]).replace(/!/g, \"%21\") : notReallyPercentEncode(value[j]);\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof value == \"object\") {\n\t\t\t\t\tif (showVariables && !varSpec.suffices['*']) {\n\t\t\t\t\t\tresult += varSpec.name + \"=\";\n\t\t\t\t\t}\n\t\t\t\t\tvar first = true;\n\t\t\t\t\tfor (var key in value) {\n\t\t\t\t\t\tif (!first) {\n\t\t\t\t\t\t\tresult += varSpec.suffices['*'] ? (separator || \",\") : \",\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfirst = false;\n\t\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(key).replace(/!/g, \"%21\") : notReallyPercentEncode(key);\n\t\t\t\t\t\tresult += varSpec.suffices['*'] ? '=' : \",\";\n\t\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(value[key]).replace(/!/g, \"%21\") : notReallyPercentEncode(value[key]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (showVariables) {\n\t\t\t\t\t\tresult += varSpec.name;\n\t\t\t\t\t\tif (!trimEmptyString || value != \"\") {\n\t\t\t\t\t\t\tresult += \"=\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (varSpec.truncate != null) {\n\t\t\t\t\t\tvalue = value.substring(0, varSpec.truncate);\n\t\t\t\t\t}\n\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(value).replace(/!/g, \"%21\"): notReallyPercentEncode(value);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tvar guessFunction = function (stringValue, resultObj) {\n\t\t\tif (prefix) {\n\t\t\t\tif (stringValue.substring(0, prefix.length) == prefix) {\n\t\t\t\t\tstringValue = stringValue.substring(prefix.length);\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (varSpecs.length == 1 && varSpecs[0].suffices['*']) {\n\t\t\t\tvar varSpec = varSpecs[0];\n\t\t\t\tvar varName = varSpec.name;\n\t\t\t\tvar arrayValue = varSpec.suffices['*'] ? stringValue.split(separator || \",\") : [stringValue];\n\t\t\t\tvar hasEquals = (shouldEscape && stringValue.indexOf('=') != -1);\t// There's otherwise no way to distinguish between \"{value*}\" for arrays and objects\n\t\t\t\tfor (var i = 1; i < arrayValue.length; i++) {\n\t\t\t\t\tvar stringValue = arrayValue[i];\n\t\t\t\t\tif (hasEquals && stringValue.indexOf('=') == -1) {\n\t\t\t\t\t\t// Bit of a hack - if we're expecting \"=\" for key/value pairs, and values can't contain \"=\", then assume a value has been accidentally split\n\t\t\t\t\t\tarrayValue[i - 1] += (separator || \",\") + stringValue;\n\t\t\t\t\t\tarrayValue.splice(i, 1);\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (var i = 0; i < arrayValue.length; i++) {\n\t\t\t\t\tvar stringValue = arrayValue[i];\n\t\t\t\t\tif (shouldEscape && stringValue.indexOf('=') != -1) {\n\t\t\t\t\t\thasEquals = true;  \n\t\t\t\t\t}\n\t\t\t\t\tvar innerArrayValue = stringValue.split(\",\");\n\t\t\t\t\tfor (var j = 0; j < innerArrayValue.length; j++) {\n\t\t\t\t\t\tif (shouldEscape) {\n\t\t\t\t\t\t\tinnerArrayValue[j] = decodeURIComponent(innerArrayValue[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (innerArrayValue.length == 1) {\n\t\t\t\t\t\tarrayValue[i] = innerArrayValue[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tarrayValue[i] = innerArrayValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif (showVariables || hasEquals) {\n\t\t\t\t\tvar objectValue = resultObj[varName] || {};\n\t\t\t\t\tfor (var j = 0; j < arrayValue.length; j++) {\n\t\t\t\t\t\tvar innerValue = stringValue;\n\t\t\t\t\t\tif (typeof arrayValue[j] == \"string\") {\n\t\t\t\t\t\t\tvar stringValue = arrayValue[j];\n\t\t\t\t\t\t\tvar innerVarName = stringValue.split(\"=\", 1)[0];\n\t\t\t\t\t\t\tvar stringValue = stringValue.substring(innerVarName.length + 1);\n\t\t\t\t\t\t\tinnerValue = stringValue;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar stringValue = arrayValue[j][0];\n\t\t\t\t\t\t\tvar innerVarName = stringValue.split(\"=\", 1)[0];\n\t\t\t\t\t\t\tvar stringValue = stringValue.substring(innerVarName.length + 1);\n\t\t\t\t\t\t\tarrayValue[j][0] = stringValue;\n\t\t\t\t\t\t\tinnerValue = arrayValue[j];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (objectValue[innerVarName] !== undefined) {\n\t\t\t\t\t\t\tif (Array.isArray(objectValue[innerVarName])) {\n\t\t\t\t\t\t\t\tobjectValue[innerVarName].push(innerValue);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tobjectValue[innerVarName] = [objectValue[innerVarName], innerValue];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tobjectValue[innerVarName] = innerValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (Object.keys(objectValue).length == 1 && objectValue[varName] !== undefined) {\n\t\t\t\t\t\tresultObj[varName] = objectValue[varName];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresultObj[varName] = objectValue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (resultObj[varName] !== undefined) {\n\t\t\t\t\t\tif (Array.isArray(resultObj[varName])) {\n\t\t\t\t\t\t\tresultObj[varName] = resultObj[varName].concat(arrayValue);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresultObj[varName] = [resultObj[varName]].concat(arrayValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (arrayValue.length == 1 && !varSpec.suffices['*']) {\n\t\t\t\t\t\t\tresultObj[varName] = arrayValue[0];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresultObj[varName] = arrayValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar arrayValue = (varSpecs.length == 1) ? [stringValue] : stringValue.split(separator || \",\");\n\t\t\t\tvar specIndexMap = {};\n\t\t\t\tfor (var i = 0; i < arrayValue.length; i++) {\n\t\t\t\t\t// Try from beginning\n\t\t\t\t\tvar firstStarred = 0;\n\t\t\t\t\tfor (; firstStarred < varSpecs.length - 1 && firstStarred < i; firstStarred++) {\n\t\t\t\t\t\tif (varSpecs[firstStarred].suffices['*']) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (firstStarred == i) {\n\t\t\t\t\t\t// The first [i] of them have no \"*\" suffix\n\t\t\t\t\t\tspecIndexMap[i] = i;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Try from the end\n\t\t\t\t\t\tfor (var lastStarred = varSpecs.length - 1; lastStarred > 0 && (varSpecs.length - lastStarred) < (arrayValue.length - i); lastStarred--) {\n\t\t\t\t\t\t\tif (varSpecs[lastStarred].suffices['*']) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((varSpecs.length - lastStarred) == (arrayValue.length - i)) {\n\t\t\t\t\t\t\t// The last [length - i] of them have no \"*\" suffix\n\t\t\t\t\t\t\tspecIndexMap[i] = lastStarred;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Just give up and use the first one\n\t\t\t\t\tspecIndexMap[i] = firstStarred;\n\t\t\t\t}\n\t\t\t\tfor (var i = 0; i < arrayValue.length; i++) {\n\t\t\t\t\tvar stringValue = arrayValue[i];\n\t\t\t\t\tvar innerArrayValue = stringValue.split(\",\");\n\t\t\t\t\n\t\t\t\t\tif (showVariables) {\n\t\t\t\t\t\tvar stringValue = innerArrayValue[0]; // using innerArrayValue\n\t\t\t\t\t\tvar varName = stringValue.split(\"=\", 1)[0];\n\t\t\t\t\t\tvar stringValue = stringValue.substring(varName.length + 1);\n\t\t\t\t\t\tinnerArrayValue[0] = stringValue;\n\t\t\t\t\t\tvar varSpec = varSpecMap[varName] || varSpecs[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar varSpec = varSpecs[specIndexMap[i]];\n\t\t\t\t\t\tvar varName = varSpec.name;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var j = 0; j < innerArrayValue.length; j++) {\n\t\t\t\t\t\tif (shouldEscape) {\n\t\t\t\t\t\t\tinnerArrayValue[j] = decodeURIComponent(innerArrayValue[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((showVariables || varSpec.suffices['*'])&& resultObj[varName] !== undefined) {\n\t\t\t\t\t\tif (Array.isArray(resultObj[varName])) {\n\t\t\t\t\t\t\tresultObj[varName] = resultObj[varName].concat(innerArrayValue);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresultObj[varName] = [resultObj[varName]].concat(innerArrayValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (innerArrayValue.length == 1 && !varSpec.suffices['*']) {\n\t\t\t\t\t\t\tresultObj[varName] = innerArrayValue[0];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresultObj[varName] = innerArrayValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tsubFunction.varNames = varNames;\n\t\treturn {\n\t\t\tprefix: prefix,\n\t\t\tsubstitution: subFunction,\n\t\t\tunSubstitution: guessFunction\n\t\t};\n\t}\n\n\tfunction UriTemplate(template) {\n\t\tif (!(this instanceof UriTemplate)) {\n\t\t\treturn new UriTemplate(template);\n\t\t}\n\t\tvar parts = template.split(\"{\");\n\t\tvar textParts = [parts.shift()];\n\t\tvar prefixes = [];\n\t\tvar substitutions = [];\n\t\tvar unSubstitutions = [];\n\t\tvar varNames = [];\n\t\twhile (parts.length > 0) {\n\t\t\tvar part = parts.shift();\n\t\t\tvar spec = part.split(\"}\")[0];\n\t\t\tvar remainder = part.substring(spec.length + 1);\n\t\t\tvar funcs = uriTemplateSubstitution(spec);\n\t\t\tsubstitutions.push(funcs.substitution);\n\t\t\tunSubstitutions.push(funcs.unSubstitution);\n\t\t\tprefixes.push(funcs.prefix);\n\t\t\ttextParts.push(remainder);\n\t\t\tvarNames = varNames.concat(funcs.substitution.varNames);\n\t\t}\n\t\tthis.fill = function (valueFunction) {\n\t\t\tvar result = textParts[0];\n\t\t\tfor (var i = 0; i < substitutions.length; i++) {\n\t\t\t\tvar substitution = substitutions[i];\n\t\t\t\tresult += substitution(valueFunction);\n\t\t\t\tresult += textParts[i + 1];\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tthis.fromUri = function (substituted) {\n\t\t\tvar result = {};\n\t\t\tfor (var i = 0; i < textParts.length; i++) {\n\t\t\t\tvar part = textParts[i];\n\t\t\t\tif (substituted.substring(0, part.length) !== part) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tsubstituted = substituted.substring(part.length);\n\t\t\t\tif (i >= textParts.length - 1) {\n\t\t\t\t\tif (substituted == \"\") {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar nextPart = textParts[i + 1];\n\t\t\t\tvar offset = i;\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (offset == textParts.length - 2) {\n\t\t\t\t\t\tvar endPart = substituted.substring(substituted.length - nextPart.length);\n\t\t\t\t\t\tif (endPart !== nextPart) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar stringValue = substituted.substring(0, substituted.length - nextPart.length);\n\t\t\t\t\t\tsubstituted = endPart;\n\t\t\t\t\t} else if (nextPart) {\n\t\t\t\t\t\tvar nextPartPos = substituted.indexOf(nextPart);\n\t\t\t\t\t\tvar stringValue = substituted.substring(0, nextPartPos);\n\t\t\t\t\t\tsubstituted = substituted.substring(nextPartPos);\n\t\t\t\t\t} else if (prefixes[offset + 1]) {\n\t\t\t\t\t\tvar nextPartPos = substituted.indexOf(prefixes[offset + 1]);\n\t\t\t\t\t\tvar stringValue = substituted.substring(0, nextPartPos);\n\t\t\t\t\t\tsubstituted = substituted.substring(nextPartPos);\n\t\t\t\t\t} else if (textParts.length > offset + 2) {\n\t\t\t\t\t\t// If the separator between this variable and the next is blank (with no prefix), continue onwards\n\t\t\t\t\t\toffset++;\n\t\t\t\t\t\tnextPart = textParts[offset + 1];\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar stringValue = substituted;\n\t\t\t\t\t\tsubstituted = \"\";\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tunSubstitutions[i](stringValue, result);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\tthis.varNames = varNames;\n\t\tthis.template = template;\n\t}\n\tUriTemplate.prototype = {\n\t\ttoString: function () {\n\t\t\treturn this.template;\n\t\t},\n\t\tfillFromObject: function (obj) {\n\t\t\treturn this.fill(function (varName) {\n\t\t\t\treturn obj[varName];\n\t\t\t});\n\t\t}\n\t};\n\treturn UriTemplate;\n});\n"]}