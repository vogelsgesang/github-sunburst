!function(){"use strict";function a(a){function b(a){return'"'===a.charAt(0)&&'"'===a.charAt(a.length-1)?a.substring(1,a.length-1):a}for(var c=/<[^>]*>\s*(\s*;\s*[^\(\)<>@,;:"\/\[\]\?={} \t]+=(([^\(\)<>@,;:"\/\[\]\?={} \t]+)|("[^"]*")))*(,|$)/g,d=/[^\(\)<>@,;:"\/\[\]\?={} \t]+=(([^\(\)<>@,;:"\/\[\]\?={} \t]+)|("[^"]*"))/g,e=a.match(c),f={},g=0;g<e.length;g++){var h=e[g].split(">"),i=h[0].substring(1),j=h[1],k={};k.href=i;for(var l=j.match(d),m=0;m<l.length;m++){var n=l[m],o=n.split("="),p=o[0];k[p]=b(o[1])}void 0!==k.rel&&(f[k.rel]=k)}return f}function b(b,c,d){function e(a){return f(b.get(a,{headers:i})).then(function(a){return a.data})}function f(b){return b.then(function(b){b.pagination={};var c=b.headers().link;if(c){var d=a(c);d.next&&(b.pagination.next=function(){return e(d.next.href)}),d.prev&&(b.pagination.prev=function(){return e(d.prev.href)})}return b})}function g(a,b){var f=b.length;return function(){if(arguments.length<f)return c.reject(new Error("tried to query "+a+" with insufficient arguments. Expected arguments: "+b.join(",")));var g=arguments[f];void 0===g&&(g={});for(var h=0;h<b.length;h++)g[b[h]]=arguments[h];return e(d(j[a]).fillFromObject(g))}}function h(a){function b(a,c){var d=_.find(a,{path:""});d?_.pull(a,d):d={};var e=_.groupBy(a,function(a){var b=a.path.indexOf("/");return 0>b&&"tree"===a.type?a.path:a.path.substr(0,b)}),f=void 0!==e[""]?e[""]:[];return _.forEach(f,function(a){a.name=a.path,a.path=c.concat(a.name)}),delete e[""],e=_.map(e,function(a,d){var e=c.concat([d]);return _.forEach(a,function(a){a.path=a.path.substr(d.length+1)}),b(a,e)}),_.assign(d,{path:c,name:c[c.length-1],children:e.concat(f)})}return b(a,[])}var i={Accept:"application/vnd.github.v3+json"},j={userSearch:"https://api.github.com/search/users?q={query}{&page,per_page,sort,order}",listUserRepositories:"https://api.github.com/users/{user}/repos{?type,page,per_page,sort}",repository:"https://api.github.com/repos/{owner}/{repo}",listBranches:"https://api.github.com/repos/{owner}/{repo}/branches{?page,per_page}",branch:"https://api.github.com/repos/{owner}/{repo}/branches/{branch}",listTags:"https://api.github.com/repos/{owner}/{repo}/tags{?page,per_page}",listCommits:"https://api.github.com/repos/{owner}/{repo}/commits{?sha,path,author,since,until,page,per_page}",tree:"https://api.github.com/repos/{owner}/{repo}/git/trees/{sha}{?recursive}"};this.searchUser=g("userSearch",["query"]),this.listUserRepositories=g("listUserRepositories",["user"]),this.getRepository=g("repository",["owner","repo"]),this.listBranches=g("listBranches",["owner","repo"]),this.getBranch=g("branch",["owner","repo","branch"]),this.listTags=g("listTags",["owner","repo"]),this.listCommits=g("listCommits",["owner","repo"]),this.getTree=g("tree",["owner","repo","sha"]),this.getCompleteTree=function(a,b,d,e){return arguments.length<3?c.reject(new Error("tried to call getCompleteTree with insufficient arguments.")):(void 0===e&&(e={}),e.recursive=1,this.getTree(a,b,d,e).then(function(a){return h(a.tree)}))}}angular.module("githubApi",["uri-templates"]).service("githubApi",["$http","$q","uriTemplate",b])}();
//# sourceMappingURL=github-api.js.map